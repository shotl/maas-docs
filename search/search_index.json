{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shotl MaaS API allows integrating demand-responsive transport services provided by Shotl with a third party platform offering multi-modal mobility, as a MaaS operator or a journey planner. Mirroring the functions of the Shotl App for passengers available in iOS and Android markets, it permits to estimate times and book rides within any of the areas where Shotl is currently offering transportation.","title":"Home"},{"location":"changelog/","text":"1.0.0 October 5, 2020 Initial release","title":"Changelog"},{"location":"changelog/#100-october-5-2020","text":"Initial release","title":"1.0.0 October 5, 2020"},{"location":"service-availability/","text":"Our service depends on from multiple operators and their availability. In order to check if Shotl can give service to the passenger, you can ask us given the specific coordinates for a specific pick-up and drop-off and it will respond with a single boolean (one request by type). API reference Related endpoint GET /v1/availability","title":"Service availability"},{"location":"service-availability/#api-reference","text":"Related endpoint GET /v1/availability","title":"API reference"},{"location":"users/","text":"Related endpoint PUT /v1/users/{user_id} Shotl is a passenger-oriented service, so we need to link each ride with a specific user. In this sense, we don't require any personal data from your database, but we have to identify them in order to give service to them when arrive to the vehicle. To accomplish with it, we have an idempotent endpoint that you can always call you need. We advice you to use it each time you use our service. Working on Some times you don't want to manage users, but rather act as a proxy between them and the different mobility solutions. We are working to enable you to connect them without having to manage any data.","title":"Users"},{"location":"getting-started/api-reference/","text":"The Shotl MAAS API is organized around REST. The API has predictable resource-oriented URLs, accepts JSON-encoded for requests and responses, and uses standard HTTP response status codes, authentication, and verbs. Environments You can use this API in sandbox mode, which does not affect live data or interact with real world. Environments Sandbox : https://sandbox.maas.shotl.com Live : https://maas.shotl.com Data On the other hand, you'll probably need to manage some data from our dashboard site to enable vehicles, drivers, service hours and all required configuration to be able to use the platform. Please contact us if you want to receive more information about it. API specification All details about endpoints are well documented in our openapi specification . These docs pretend to work as a conceptual tool to understand all our business flows and how to interact with the API as a MAAS operator.","title":"API Reference"},{"location":"getting-started/api-reference/#environments","text":"You can use this API in sandbox mode, which does not affect live data or interact with real world. Environments Sandbox : https://sandbox.maas.shotl.com Live : https://maas.shotl.com","title":"Environments"},{"location":"getting-started/api-reference/#data","text":"On the other hand, you'll probably need to manage some data from our dashboard site to enable vehicles, drivers, service hours and all required configuration to be able to use the platform. Please contact us if you want to receive more information about it.","title":"Data"},{"location":"getting-started/api-reference/#api-specification","text":"All details about endpoints are well documented in our openapi specification . These docs pretend to work as a conceptual tool to understand all our business flows and how to interact with the API as a MAAS operator.","title":"API specification"},{"location":"getting-started/authentication/","text":"We use standard JWT tokens described at RFC 7519 to protect our endpoints. You'll need credentials, that consist in a username and password, that we will be happy to share with you ( contact us ). One you have your credentials, you'll need to generate an access token trough our token endpoint adding a basic authentication in the headers. Context and limits Shotl can work with its own mark or bring a white label to others. Work areas, drivers, service hours, passengers, etc. are independent of each other, so you will need credentials for each of them that you have access to. Security The generated access token opens our system to perform some actions on behalf of the passengers. Don't store it on the client side to avoid a security leak. On the other hand, these tokens have a short expiration time for minimize the impact of a potential thief. To reduce its complexity, you can call our token endpoint before starting each new flow with shotl and keep it on memory trough all the use case. Related endpoint POST /v1/token","title":"Authentication"},{"location":"getting-started/authentication/#context-and-limits","text":"Shotl can work with its own mark or bring a white label to others. Work areas, drivers, service hours, passengers, etc. are independent of each other, so you will need credentials for each of them that you have access to.","title":"Context and limits"},{"location":"getting-started/authentication/#security","text":"The generated access token opens our system to perform some actions on behalf of the passengers. Don't store it on the client side to avoid a security leak. On the other hand, these tokens have a short expiration time for minimize the impact of a potential thief. To reduce its complexity, you can call our token endpoint before starting each new flow with shotl and keep it on memory trough all the use case. Related endpoint POST /v1/token","title":"Security"},{"location":"getting-started/errors/","text":"We use conventional HTTP status codes to indicate the success or failure of an API request. In general: 2xx indicates success 4xx indicates a client error 5xx indicates an error from our servers (not normal) Working on We are working to improve this section in order to inform you about the different codes included in our responses to react more suitably to a possible error.","title":"Errors"},{"location":"getting-started/versioning/","text":"Our platform is in continuous improvement, so it is possible that some changes require a new version. We always keep our outdated endpoints for a long time to give you a great time to adapt to new features. Of course, if we close some old endpoint, we will contact you in advance.","title":"Versioning"},{"location":"rides/creating-ride/","text":"Draft Related endpoint POST /v1/rides A ride have to pass through a serie of steps to be confirm. The first one would be generate a draft in order to quote it and inform to the passenger about pickup time, drop-off time, pricing, etc. There are two types of rides: Type Description RIDE_NOW Rides on demand that can be requested at any moment (within service hours) SCHEDULE_RIDE Rides within the next 15 natural days considering the day when the petition is made (petition_time) as day 1 This endpoint will respond with all the relevant data of the passenger's ride such as the place of the pick-up location (remember bus stops / virtual stops), the expected times and information about the payment, if applicable. Confirmation Related endpoint POST /v1/rides/{ride-id}/confirm Once the passenger receive a quote (draft), if it is ok with the conditions, it can be confirmed with a simple request to our api endpoint. This action will generate a different action depending if it's a RIDE_NOW or a SCHEDULE_RIDE. If it's the first one or it's a schedule ride within the next 2 hours, it will appear on the driver roadmap immediately. Otherwise it will be informed to our driver's roadmap no earlier before two hours for the pickup time. More information here .","title":"Creating a ride"},{"location":"rides/creating-ride/#draft","text":"Related endpoint POST /v1/rides A ride have to pass through a serie of steps to be confirm. The first one would be generate a draft in order to quote it and inform to the passenger about pickup time, drop-off time, pricing, etc. There are two types of rides: Type Description RIDE_NOW Rides on demand that can be requested at any moment (within service hours) SCHEDULE_RIDE Rides within the next 15 natural days considering the day when the petition is made (petition_time) as day 1 This endpoint will respond with all the relevant data of the passenger's ride such as the place of the pick-up location (remember bus stops / virtual stops), the expected times and information about the payment, if applicable.","title":"Draft"},{"location":"rides/creating-ride/#confirmation","text":"Related endpoint POST /v1/rides/{ride-id}/confirm Once the passenger receive a quote (draft), if it is ok with the conditions, it can be confirmed with a simple request to our api endpoint. This action will generate a different action depending if it's a RIDE_NOW or a SCHEDULE_RIDE. If it's the first one or it's a schedule ride within the next 2 hours, it will appear on the driver roadmap immediately. Otherwise it will be informed to our driver's roadmap no earlier before two hours for the pickup time. More information here .","title":"Confirmation"},{"location":"rides/history/","text":"Related endpoint GET /v1/rides All rides are accessible after they are created. You can show to the users all their history and filter them by its status. Drafts Please note that an unconfirmed ride (draft) may take removed from our system if it hasn't been confirmed after a time (time specified by area configuration).","title":"History"},{"location":"rides/info/","text":"Detail Related endpoint GET /v1/rides/{id} You can retrieve the detail from a ride once it's created. Please note that an unconfirmed ride (draft) may take removed from our system if it hasn't been confirmed after a time (time specified by area configuration). Vehicle assigned Related endpoint GET /v1/rides/{id}/vehicle Shotl algoritms may change the assigned vehicle at any moment if they consider it more efficient. It's recommended to check it periodically. On the other hand, it can be null if there is no vehicle assigned. Vehicle's location Related endpoint GET /v1/rides/{id}/vehicle-location Location is being reported by the vehicle once the ride's status is DRIVER_LAUNCHED or ONBOARD . Any other status will result as a null as response. Predicted times Related endpoint GET /v1/rides/{id}/predictes-times Predicted times may differ from desired and scheduled times depending on traffic conditions or any other reason. It is recommended to let the user know this information for a better experience. Route Related endpoint GET /v1/rides/{id}/status This is the route since the user is being picked up by the vehicle until it has reached its destiny. It includes all stops during the journey. Status Related endpoint GET /v1/rides/{id}/status It's a simple shortcut to see the current status of the ride.","title":"Getting info of a ride"},{"location":"rides/info/#detail","text":"Related endpoint GET /v1/rides/{id} You can retrieve the detail from a ride once it's created. Please note that an unconfirmed ride (draft) may take removed from our system if it hasn't been confirmed after a time (time specified by area configuration).","title":"Detail"},{"location":"rides/info/#vehicle-assigned","text":"Related endpoint GET /v1/rides/{id}/vehicle Shotl algoritms may change the assigned vehicle at any moment if they consider it more efficient. It's recommended to check it periodically. On the other hand, it can be null if there is no vehicle assigned.","title":"Vehicle assigned"},{"location":"rides/info/#vehicles-location","text":"Related endpoint GET /v1/rides/{id}/vehicle-location Location is being reported by the vehicle once the ride's status is DRIVER_LAUNCHED or ONBOARD . Any other status will result as a null as response.","title":"Vehicle's location"},{"location":"rides/info/#predicted-times","text":"Related endpoint GET /v1/rides/{id}/predictes-times Predicted times may differ from desired and scheduled times depending on traffic conditions or any other reason. It is recommended to let the user know this information for a better experience.","title":"Predicted times"},{"location":"rides/info/#route","text":"Related endpoint GET /v1/rides/{id}/status This is the route since the user is being picked up by the vehicle until it has reached its destiny. It includes all stops during the journey.","title":"Route"},{"location":"rides/info/#status","text":"Related endpoint GET /v1/rides/{id}/status It's a simple shortcut to see the current status of the ride.","title":"Status"},{"location":"rides/introduction/","text":"A ride is a petition made by a passenger to travel within the Shotl system, regardless of whether it has been finally done or not. Service availability The availability of a service is being determined by different factors: Zone availability Connected vehicles Service hours Number of passengers The first one, service availability, can be checked through our specific endpoint, as it's explained here . Once you know that Shotl brings service to the given area, you will be able to start the process of a ride schedule.","title":"Introduction"},{"location":"rides/introduction/#service-availability","text":"The availability of a service is being determined by different factors: Zone availability Connected vehicles Service hours Number of passengers The first one, service availability, can be checked through our specific endpoint, as it's explained here . Once you know that Shotl brings service to the given area, you will be able to start the process of a ride schedule.","title":"Service availability"},{"location":"rides/payments/","text":"Related endpoint PUT /v1/rides/{id}/payment Sometimes you will manage the payment of a ride by your own side. It's possible to mark a ride as paid or unpaid and leave a message to be read by the driver.","title":"Payments"},{"location":"rides/status-and-transitions/","text":"In order to know how the ride works, it's important to understand the different status that can take along its life cycle. Status Description DRAFT The passenger has requested a ride but has not confirmed it SCHEDULED The passenger has confirmed a ride which is of type SCHEDULE_RIDE and its expected pickup time is more than 2h far from now. The trip does not appear neither in the DriverApp nor the PassengerApp. DRIVER_LAUNCHED The passenger has confirmed a ride which is of type SCHEDULE_RIDE and its expected pickup time is between 2h and 10 minutes far from now. The trip does appear only in the DriverApp, not in the PassengerApp. The following API endpoints are available USER_LAUNCHED The passenger has confirmed a ride which is of type RIDE_NOW or is of type SCHEDULE_RIDE and its expected pickup time less than 10 minutes far from now. The trip does appear both in the DriverApp and the PassengerApp CANCELLED The passenger has cancelled the trip NOSHOW The passenger did not show up at the pickup station and has not been picked up ONBOARD The passenger is on board of the vehicle FINISHED The passenger has finished the trip as expected EARLYDROPOFF The passenger has finished the trip, asking to leave earlier than expected using the functionality \u201cEARLYDROPOFF\u201d from the driver App Transitions And these are the transitions allowed for each status:","title":"Status and transitions"},{"location":"rides/status-and-transitions/#transitions","text":"And these are the transitions allowed for each status:","title":"Transitions"},{"location":"webhooks/about/","text":"Webhooks allow you to build or set up integrations with all events related with passengers. When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL. Webhooks can be used to keep passengers involved with the latest news through you normally do, either by email, push notification, telephone, etc. You can create up to 1 webhook for each event.","title":"About"},{"location":"webhooks/creating/","text":"You can install webhooks on each account. To set up a webhook, you can call to our webhooks endpoints well documented in our API specification. Creating / Updating webhooks Related endpoint PATCH /v1/webhooks Getting them Related endpoint GET /v1/webhooks","title":"Configuration"},{"location":"webhooks/creating/#creating-updating-webhooks","text":"Related endpoint PATCH /v1/webhooks","title":"Creating / Updating webhooks"},{"location":"webhooks/creating/#getting-them","text":"Related endpoint GET /v1/webhooks","title":"Getting them"},{"location":"webhooks/security/","text":"Once your server is configured to receive events, it will listen for any message sent to the endpoint you configured. For security reasons, you probably want to limit requests to those coming from Shotl. The far easiest method is to validate our request trough the signature. Headers All events are sent with two important headers Name Description X-Date UNIX timestamp when the event was triggered X-Signature Sha256 Signature Signature validation You can compute a hash using your API password , and ensure that the hash from the request matches. Shotl uses an HMAC Sha256 hexdigest from the body to compute the hash. Example GO package main import ( \"crypto/hmac\" \"crypto/sha256\" \"encoding/base64\" \"fmt\" ) func ComputeHmac256 ( message string , secret string ) string { key := [] byte ( secret ) h := hmac . New ( sha256 . New , key ) h . Write ([] byte ( message )) return base64 . StdEncoding . EncodeToString ( h . Sum ( nil )) } func main () { body := myFunctionToReadRequestBody () fmt . Println ( ComputeHmac256 ( body , \"<YOUR API PASSWORD>\" )) } PHP body = myFunctionToReadRequestBody() $s = hash_hmac('sha256', body, '<YOUR API PASSWORD>', true); echo base64_encode($s); JAVA Dependent on (Apache Commons Codec)[https://commons.apache.org/proper/commons-codec/] to encode in base64. import javax.crypto.Mac ; import javax.crypto.spec.SecretKeySpec ; import org.apache.commons.codec.binary.Base64 ; public class ApiSecurityExample { public static void main ( String [] args ) { try { String secret = < YOUR API PASSWORD > ; String message = myFunctionToReadRequestBody (); Mac sha256_HMAC = Mac . getInstance ( \"HmacSHA256\" ); SecretKeySpec secret_key = new SecretKeySpec ( secret . getBytes (), \"HmacSHA256\" ); sha256_HMAC . init ( secret_key ); String hash = Base64 . encodeBase64String ( sha256_HMAC . doFinal ( message . getBytes ())); System . out . println ( hash ); } catch ( Exception e ){ System . out . println ( \"Error\" ); } } }","title":"Security"},{"location":"webhooks/security/#headers","text":"All events are sent with two important headers Name Description X-Date UNIX timestamp when the event was triggered X-Signature Sha256 Signature","title":"Headers"},{"location":"webhooks/security/#signature-validation","text":"You can compute a hash using your API password , and ensure that the hash from the request matches. Shotl uses an HMAC Sha256 hexdigest from the body to compute the hash. Example GO package main import ( \"crypto/hmac\" \"crypto/sha256\" \"encoding/base64\" \"fmt\" ) func ComputeHmac256 ( message string , secret string ) string { key := [] byte ( secret ) h := hmac . New ( sha256 . New , key ) h . Write ([] byte ( message )) return base64 . StdEncoding . EncodeToString ( h . Sum ( nil )) } func main () { body := myFunctionToReadRequestBody () fmt . Println ( ComputeHmac256 ( body , \"<YOUR API PASSWORD>\" )) } PHP body = myFunctionToReadRequestBody() $s = hash_hmac('sha256', body, '<YOUR API PASSWORD>', true); echo base64_encode($s); JAVA Dependent on (Apache Commons Codec)[https://commons.apache.org/proper/commons-codec/] to encode in base64. import javax.crypto.Mac ; import javax.crypto.spec.SecretKeySpec ; import org.apache.commons.codec.binary.Base64 ; public class ApiSecurityExample { public static void main ( String [] args ) { try { String secret = < YOUR API PASSWORD > ; String message = myFunctionToReadRequestBody (); Mac sha256_HMAC = Mac . getInstance ( \"HmacSHA256\" ); SecretKeySpec secret_key = new SecretKeySpec ( secret . getBytes (), \"HmacSHA256\" ); sha256_HMAC . init ( secret_key ); String hash = Base64 . encodeBase64String ( sha256_HMAC . doFinal ( message . getBytes ())); System . out . println ( hash ); } catch ( Exception e ){ System . out . println ( \"Error\" ); } } }","title":"Signature validation"},{"location":"webhooks/types/","text":"Events are at the core of webhooks. These webhooks fire whenever a certain action is taken on the vehicle, which your server's payload URL intercepts and acts upon. Driver is here The event is being triggered by the driver on arrive to the expected pick-up location. The passenger has a short time to get on the vehicle. { \"id\" : \"string\" , \"type\" : \"IM_HERE\" , \"created_at\" : \"int64\" , \"body\" : { \"ride_id\" : \"string\" , \"user_id\" : \"string\" } } Passenger no show The event is being triggered by the driver on a passenger no show. { \"id\" : \"string\" , \"type\" : \"NO_SHOW\" , \"created_at\" : \"int64\" , \"body\" : { \"ride_id\" : \"string\" , \"user_id\" : \"string\" } }","title":"Types"},{"location":"webhooks/types/#driver-is-here","text":"The event is being triggered by the driver on arrive to the expected pick-up location. The passenger has a short time to get on the vehicle. { \"id\" : \"string\" , \"type\" : \"IM_HERE\" , \"created_at\" : \"int64\" , \"body\" : { \"ride_id\" : \"string\" , \"user_id\" : \"string\" } }","title":"Driver is here"},{"location":"webhooks/types/#passenger-no-show","text":"The event is being triggered by the driver on a passenger no show. { \"id\" : \"string\" , \"type\" : \"NO_SHOW\" , \"created_at\" : \"int64\" , \"body\" : { \"ride_id\" : \"string\" , \"user_id\" : \"string\" } }","title":"Passenger no show"}]}